
(load "prover-load-j-bob.scm")

(jbob.step (prelude)
           '(atom '())
           '((() (atom '()))))

(jbob.step (prelude)
           '(atom (cons a b))
           '((() (atom/cons a b))))

(jbob.step (prelude)
           '(atom (cons 'ham '(eggs)))
           '(((1) (cons 'ham '(eggs)))
             (() (atom '(ham eggs)))))

(jbob.step (prelude)
           '(equal 'flapjack (atom (cons a b)))
           '(((2) (atom/cons a b))
             (() (equal 'flapjack 'nil))))

(jbob.step (prelude)
           '(atom (cdr (cons (car (cons p q)) '())))
           '(((1 1 1) (car/cons p q))
             ;; ((1) (cdr/cons p '()))
             ;; (() (atom '()))
             ))

(jbob.step (prelude)
           '(atom (cdr (cons (car (cons p q)) '())))
           '(((1 1 1) (car/cons p q))
             ((1) (cdr/cons p '()))
             ;; (() (atom '()))
             ))

(jbob.step (prelude)
           '(atom (cdr (cons (car (cons p q)) '())))
           '(((1 1 1) (car/cons p q))
             ((1) (cdr/cons p '()))
             (() (atom '()))))

(jbob.step (prelude)
           '(atom (cdr (cons (car (cons p q)) '())))
           '(((1) (cdr/cons (car (cons p q)) '()))
             (() (atom '()))))

(jbob.step (prelude)
           '(atom (cdr (cons (car (cons p q)) '())))
           '((() (atom '()))
             ((1) (cdr/cons (car (cons p q)) '()))))

(jbob.step (prelude)
           '(equal 'eggs '(ham))
           '((() (equal 'eggs '(ham)))))

(jbob.step (prelude)
           '(car (cons (equal (cons x y) (cons x y))
                       '(and crumpets)))
           '(((1 1) (equal-same (cons x y)))
             ;; ((1) (cons 't '(and crumpets)))
             ;; (() (car '(t and crumpets)))
             ))

(jbob.step (prelude)
           '(car (cons (equal (cons x y) (cons x y))
                       '(and crumpets)))
           '(((1 1) (equal-same (cons x y)))
             ((1) (cons 't '(and crumpets)))
             ;; (() (car '(t and crumpets)))
             ))

(jbob.step (prelude)
           '(car (cons (equal (cons x y) (cons x y))
                       '(and crumpets)))
           '(((1 1) (equal-same (cons x y)))
             ((1) (cons 't '(and crumpets)))
             (() (car '(t and crumpets)))))

(jbob.step (prelude)
           '(car (cons (equal (cons x y) (cons x y))
                       '(and crumpets)))
           '((() (car/cons (equal (cons x y) (cons x y))
                           '(and crumpets)))
             (() (equal-same (cons x y)))))

(jbob.step (prelude)
           '(equal (cons x y) (cons 'bagels '(and lox)))
           '((() (equal-swap (cons x y)
                             (cons 'bagels '(and lox))))))

(jbob.step (prelude)
           '(equal (cons x y) (cons 'bagels '(and lox)))
           '((() (equal-swap (cons x y)
                             (cons 'bagels '(and lox))))))

(jbob.step (prelude)
           '(cons y (equal (car (cons (cdr x) (car y)))
                           (equal (atom x) 'nil)))
           '(((2 1) (car/cons (cdr x) (car y)))))

(jbob.step (prelude)
           '(cons y (equal (car (cons (cdr x) (car y)))
                           (equal (atom x) 'nil)))
           '(((2 1) (car/cons (car (cons (cdr x) (car y)))
                              '(oats)))
             ;; ((2 2 2) (atom/cons (atom (cdr (cons a b)))
             ;;                     (equal (cons a b) c)))
             ;; ((2 2 2 1 1 1) (cdr/cons a b))
             ;; ((2 2 2 1 2) (equal-swap (cons a b) c))
             ))

(jbob.step (prelude)
           '(equal (car (cons (cdr x) (car y)))
                   (equal (atom x) 'nil))
           '(((1) (car/cons (car (cons (cdr x) (car y)))
                            '(oats)))))

(jbob.step (prelude)
           '(cons y (equal (car (cons (cdr x) (car y)))
                           (equal (atom x) 'nil)))
           '(((2 1) (car/cons (car (cons (cdr x) (car y)))
                              '(oats)))
             ((2 2 2) (atom/cons (atom (cdr (cons a b)))
                                 (equal (cons a b) c)))
             ;; ((2 2 2 1 1 1) (cdr/cons a b))
             ;; ((2 2 2 1 2) (equal-swap (cons a b) c))
             ))

(jbob.step (prelude)
           '(cons y (equal (car (cons (cdr x) (car y)))
                           (equal (atom x) 'nil)))
           '(((2 1) (car/cons (car (cons (cdr x) (car y)))
                              '(oats)))
             ((2 2 2) (atom/cons (atom (cdr (cons a b)))
                                 (equal (cons a b) c)))
             ((2 2 2 1 1 1) (cdr/cons a b))
             ;; ((2 2 2 1 2) (equal-swap (cons a b) c))
             ))

(jbob.step (prelude)
           '(cons y (equal (car (cons (cdr x) (car y)))
                           (equal (atom x) 'nil)))
           '(((2 1) (car/cons (car (cons (cdr x) (car y)))
                              '(oats)))
             ((2 2 2) (atom/cons (atom (cdr (cons a b)))
                                 (equal (cons a b) c)))
             ((2 2 2 1 1 1) (cdr/cons a b))
             ((2 2 2 1 2) (equal-swap (cons a b) c))))

(jbob.step (prelude)
           '(atom (car (cons (car a) (cdr b))))
           '(((1) (car/cons (car a) (cdr b)))))

