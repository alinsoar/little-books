
(load "prover-load-j-bob.scm")

(jbob.step (prelude)
           '(if (car (cons a b)) c c)
           '(;; ((Q) (car/cons a b))
             ;; (() (if-same a c))
             ;; (()
             ;;  (if-same
             ;;   (if (equal a 't) (if (equal 'nil 'nil) a b) (equal 'or (cons 'black '(coffee))))
             ;;   c))
             ;; ((Q E 2) (cons 'black '(coffee)))
             ;; ((Q A Q) (equal-same 'nil))
             ;; ((Q A) (if-true a b))
             ;; ((Q A) (equal-if a 't))
             ))

(jbob.step (prelude)
           '(if (car (cons a b)) c c)
           '(((Q) (car/cons a b))
             ;; (() (if-same a c))
             ;; (()
             ;;  (if-same
             ;;   (if (equal a 't) (if (equal 'nil 'nil) a b) (equal 'or (cons 'black '(coffee))))
             ;;   c))
             ;; ((Q E 2) (cons 'black '(coffee)))
             ;; ((Q A Q) (equal-same 'nil))
             ;; ((Q A) (if-true a b))
             ;; ((Q A) (equal-if a 't))
             ))

(jbob.step (prelude)
           '(if (car (cons a b)) c c)
           '(((Q) (car/cons a b))
             (() (if-same a c))
             ;; (()
             ;;  (if-same
             ;;   (if (equal a 't) (if (equal 'nil 'nil) a b) (equal 'or (cons 'black '(coffee))))
             ;;   c))
             ;; ((Q E 2) (cons 'black '(coffee)))
             ;; ((Q A Q) (equal-same 'nil))
             ;; ((Q A) (if-true a b))
             ;; ((Q A) (equal-if a 't))
             ))

(jbob.step (prelude)
           '(if (car (cons a b)) c c)
           '(((Q) (car/cons a b))
             (() (if-same a c))
             (()
              (if-same
               (if (equal a 't)
                   (if (equal 'nil 'nil) a b)
                   (equal 'or
                          (cons 'black '(coffee))))
               c))
             ;; ((Q E 2) (cons 'black '(coffee)))
             ;; ((Q A Q) (equal-same 'nil))
             ;; ((Q A) (if-true a b))
             ;; ((Q A) (equal-if a 't))
             ))

(jbob.step (prelude)
           '(if (car (cons a b)) c c)
           '(((Q) (car/cons a b))
             (() (if-same a c))
             (()
              (if-same
               (if (equal a 't)
                   (if (equal 'nil 'nil) a b)
                   (equal 'or
                          (cons 'black '(coffee))))
               c))
             ((Q E 2) (cons 'black '(coffee)))
             ;; ((Q A Q) (equal-same 'nil))
             ;; ((Q A) (if-true a b))
             ;; ((Q A) (equal-if a 't))
             ))

(jbob.step (prelude)
           '(if (car (cons a b)) c c)
           '(((Q) (car/cons a b))
             (() (if-same a c))
             (()
              (if-same
               (if (equal a 't)
                   (if (equal 'nil 'nil) a b)
                   (equal 'or
                          (cons 'black '(coffee))))
               c))
             ((Q E 2) (cons 'black '(coffee)))
             ((Q A Q) (equal-same 'nil))
             ;; ((Q A) (if-true a b))
             ;; ((Q A) (equal-if a 't))
             ))

(jbob.step (prelude)
           '(if (car (cons a b)) c c)
           '(((Q) (car/cons a b))
             (() (if-same a c))
             (()
              (if-same
               (if (equal a 't)
                   (if (equal 'nil 'nil) a b)
                   (equal 'or
                          (cons 'black '(coffee))))
               c))
             ((Q E 2) (cons 'black '(coffee)))
             ((Q A Q) (equal-same 'nil))
             ((Q A) (if-true a b))
             ;; ((Q A) (equal-if a 't))
             ))

(jbob.step (prelude)
           '(if (car (cons a b)) c c)
           '(((Q) (car/cons a b))
             (() (if-same a c))
             (()
              (if-same
               (if (equal a 't)
                   (if (equal 'nil 'nil) a b)
                   (equal 'or
                          (cons 'black '(coffee))))
               c))
             ((Q E 2) (cons 'black '(coffee)))
             ((Q A Q) (equal-same 'nil))
             ((Q A) (if-true a b))
             ((Q A) (equal-if a 't))))

(dethm jabberwocky (x)
       (if (brillig x)
           (if (slithy x)
               (equal (mimsy x) 'borogove)
               (equal (mome x) 'rath))
           (if (uffish x)
               (equal (frumious x) 'bandersnatch)
               (equal (frabjous x) 'beamish))))

(jbob.step (prelude)
           '(if (atom (car a))
                (if (equal (car a) (cdr a)) 'hominy 'grits)
                (if (equal (cdr (car a)) '(hash browns))
                    (cons 'ketchup (car a))
                    (cons 'mustard (car a))))
           '(((E A 2) (cons/car+cdr (car a)))
             ;;((E A 2 2) (equal-if (cdr (car a)) '(hash browns)))
             ))

(jbob.step (prelude)
           '(if (atom (car a))
                (if (equal (car a) (cdr a)) 'hominy 'grits)
                (if (equal (cdr (car a)) '(hash browns))
                    (cons 'ketchup (car a))
                    (cons 'mustard (car a))))
           '(((E A 2) (cons/car+cdr (car a)))
             ((E A 2 2) (equal-if (cdr (car a)) '(hash browns)))
             ))


