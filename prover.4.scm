
(load "prover-load-j-bob.scm")

(jbob.prove
 (list-extend (prelude)
              '(defun partial (x)
                 (if (partial x) 'nil 't)))
 '(((dethm contradiction () 'nil)
    nil
    (() (if-same (partial x) 'nil))
    ;; ((A) (if-nest-A (partial x) 'nil 't))
    ;; ((E) (if-nest-E (partial x) 't 'nil))
    ;; ((A Q) (partial x))
    ;; ((E Q) (partial x))
    ;; ((A Q) (if-nest-A (partial x) 'nil 't))
    ;; ((E Q) (if-nest-E (partial x) 'nil 't))
    ;; ((A) (if-false 'nil 't))
    ;; ((E) (if-true 't 'nil))
    ;; (() (if-same (partial x) 't))
    )))

(jbob.prove
 (list-extend (prelude)
              '(defun partial (x)
                 (if (partial x) 'nil 't)))
 '(((dethm contradiction () 'nil)
    nil
    (() (if-same (partial x) 'nil))
    ((A) (if-nest-A (partial x) 'nil 't))
    ;; ((E) (if-nest-E (partial x) 't 'nil))
    ;; ((A Q) (partial x))
    ;; ((E Q) (partial x))
    ;; ((A Q) (if-nest-A (partial x) 'nil 't))
    ;; ((E Q) (if-nest-E (partial x) 'nil 't))
    ;; ((A) (if-false 'nil 't))
    ;; ((E) (if-true 't 'nil))
    ;; (() (if-same (partial x) 't))
    )))

(jbob.prove
 (list-extend (prelude)
              '(defun partial (x)
                 (if (partial x) 'nil 't)))
 '(((dethm contradiction () 'nil)
    nil
    (() (if-same (partial x) 'nil))
    ((A) (if-nest-A (partial x) 'nil 't))
    ((E) (if-nest-E (partial x) 't 'nil))
    ((A Q) (partial x))
    ((E Q) (partial x))
    ((A Q) (if-nest-A (partial x) 'nil 't))
    ((E Q) (if-nest-E (partial x) 'nil 't))
    ((A) (if-false 'nil 't))
    ((E) (if-true 't 'nil))
    (() (if-same (partial x) 't)))))

(jbob.prove (prelude)
            '(((defun list? (x)
                 (if (atom x) (equal x '()) (list? (cdr x))))
               (size x)
               ((Q) (natp/size x))
               (() (if-true (if (atom x) 't (< (size (cdr x)) (size x))) 'nil))
               ((E) (size/cdr x))
               (() (if-same (atom x) 't)))))

(jbob.prove (defun.list2?)
            '(((defun list? (x)
                 (if (atom x)
                     (equal x '())
                     (list? (cdr x))))
               ;; (size x)
               ;; ((Q) (natp/size x))
               ;; (() (if-true (if (atom x) 't (< (size (cdr x)) (size x))) 'nil))
               ;; ((E) (size/cdr x))
               ;; (() (if-same (atom x) 't))
               )))

(jbob.prove (defun.list?)
            '(((defun sub (x y)
                 (if (atom y)
                     (if (equal y '?)
                         x
                         y)
                     (cons (sub x (car y))
                           (sub x (cdr y)))))
               (size y))))

(jbob.prove (defun.list?)
            '(((defun sub (x y)
                 (if (atom y)
                     (if (equal y '?)
                         x
                         y)
                     (cons (sub x (car y))
                           (sub x (cdr y)))))
               (size y)
               ((Q) (natp/size y)))))

(jbob.prove (defun.list?)
            '(((defun sub (x y)
                 (if (atom y)
                     (if (equal y '?)
                         x
                         y)
                     (cons (sub x (car y))
                           (sub x (cdr y)))))
               (size y)
               ((Q) (natp/size y))
               ((A E Q) (size/car y))
               ((A E A) (size/cdr y)))))

(jbob.prove (defun.list?)
            '(((defun sub (x y)
                 (if (atom y)
                     (if (equal y '?)
                         x
                         y)
                     (cons (sub x (car y))
                           (sub x (cdr y)))))
               (size y)
               ((Q) (natp/size y))
               ((A E Q) (size/car y))
               ((A E A) (size/cdr y))
               ((A E) (if-true 't 'nil)))))

(jbob.prove (defun.list?)
            '(((defun sub (x y)
                 (if (atom y)
                     (if (equal y '?)
                         x
                         y)
                     (cons (sub x (car y))
                           (sub x (cdr y)))))
               (size y)
               ((Q) (natp/size y))
               ((A E Q) (size/car y))
               ((A E A) (size/cdr y))
               ((A E) (if-true 't 'nil))
               ((A) (if-same (atom y) 't)))))

(jbob.prove (defun.list?)
            '(((defun sub (x y)
                 (if (atom y)
                     (if (equal y '?)
                         x
                         y)
                     (cons (sub x (car y))
                           (sub x (cdr y)))))
               (size y)
               ((Q) (natp/size y))
               ((A E Q) (size/car y))
               ((A E A) (size/cdr y))
               ((A E) (if-true 't 'nil))
               ((A) (if-same (atom y) 't))
               (() (if-true 't 'nil)))))



