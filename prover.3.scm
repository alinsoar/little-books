
(load "prover-load-j-bob.scm")


(jbob.step (defun.pair)
           '(pair 'sharp 'cheddar)
           '((() (pair 'sharp 'cheddar))))

(jbob.step (defun.second-of)
           '(pair 'sharp 'cheddar)
           '((() (pair 'sharp 'cheddar))))

(jbob.step (prelude)
           '(pair 'sharp 'cheddar)
           '((() (pair 'sharp 'cheddar))))

(jbob.prove (defun.second-of)
            '(((dethm first-of-pair (a b)
                      (equal (first-of (pair a b))
                             a))
               nil
               ((1 1) (pair a b))
               ;;((1) (first-of (cons a (cons b '()))))
               )))

(jbob.prove (defun.second-of)
            '(((dethm first-of-pair (a b)
                      (equal (first-of (pair a b))
                             a))
               nil
               ((1 1) (pair a b))
               ((1) (first-of (cons a (cons b '()))))
               )))

(jbob.prove (defun.second-of)
            '(((dethm first-of-pair (a b)
                      (equal (first-of (pair a b))
                             a))
               nil
               ((1 1) (pair a b))
               ((1) (first-of (cons a (cons b '()))))
               ((1) (car/cons a (cons b '()))))))

(jbob.prove (defun.second-of)
            '(((dethm first-of-pair (a b)
                      (equal (first-of (pair a b))
                             a))
               nil
               ((1 1) (pair a b))
               ((1) (first-of (cons a (cons b '()))))
               ((1) (car/cons a (cons b '())))
               (() (equal-same a)))))

(jbob.prove (dethm.in-first-of-pair)
            '(((dethm in-second-of-pair (a)
                      (equal (in-pair? (pair a '?)) 't))
               nil
               ;; ((1 1) (pair a '?))
               ;; ((1) (in-pair? (cons a (cons '? '()))))
               ;; ((1 Q 1) (first-of (cons a (cons '? '()))))
               ;; ((1 Q 1) (car/cons a (cons '? '())))
               ;; ((1 E 1) (second-of (cons a (cons '? '()))))
               ;; ((1 E 1 1) (cdr/cons a (cons '? '())))
               ;; ((1 E 1) (car/cons '? '()))
               ;; ((1 E) (equal-same '?))
               ;; ((1) (if-same (equal a '?) 't))
               ;; (() (equal-same 't))
               )))

(jbob.prove (dethm.in-first-of-pair)
            '(((dethm in-second-of-pair (a)
                      (equal (in-pair? (pair a '?)) 't))
               nil
               ((1 1) (pair a '?))
               ;; ((1) (in-pair? (cons a (cons '? '()))))
               ;; ((1 Q 1) (first-of (cons a (cons '? '()))))
               ;; ((1 Q 1) (car/cons a (cons '? '())))
               ;; ((1 E 1) (second-of (cons a (cons '? '()))))
               ;; ((1 E 1 1) (cdr/cons a (cons '? '())))
               ;; ((1 E 1) (car/cons '? '()))
               ;; ((1 E) (equal-same '?))
               ;; ((1) (if-same (equal a '?) 't))
               ;; (() (equal-same 't))
               )))

(jbob.prove (dethm.in-first-of-pair)
            '(((dethm in-second-of-pair (a)
                      (equal (in-pair? (pair a '?)) 't))
               nil
               ((1 1) (pair a '?))
               ((1) (in-pair? (cons a (cons '? '()))))
               ;; ((1 Q 1) (first-of (cons a (cons '? '()))))
               ;; ((1 Q 1) (car/cons a (cons '? '())))
               ;; ((1 E 1) (second-of (cons a (cons '? '()))))
               ;; ((1 E 1 1) (cdr/cons a (cons '? '())))
               ;; ((1 E 1) (car/cons '? '()))
               ;; ((1 E) (equal-same '?))
               ;; ((1) (if-same (equal a '?) 't))
               ;; (() (equal-same 't))
               )))

(jbob.prove (dethm.in-first-of-pair)
            '(((dethm in-second-of-pair (a)
                      (equal (in-pair? (pair a '?)) 't))
               nil
               ((1 1) (pair a '?))
               ((1) (in-pair? (cons a (cons '? '()))))
               ((1 Q 1) (first-of (cons a (cons '? '()))))
               ;; ((1 Q 1) (car/cons a (cons '? '())))
               ;; ((1 E 1) (second-of (cons a (cons '? '()))))
               ;; ((1 E 1 1) (cdr/cons a (cons '? '())))
               ;; ((1 E 1) (car/cons '? '()))
               ;; ((1 E) (equal-same '?))
               ;; ((1) (if-same (equal a '?) 't))
               ;; (() (equal-same 't))
               )))

(jbob.prove (dethm.in-first-of-pair)
            '(((dethm in-second-of-pair (a)
                      (equal (in-pair? (pair a '?)) 't))
               nil
               ((1 1) (pair a '?))
               ((1) (in-pair? (cons a (cons '? '()))))
               ((1 Q 1) (first-of (cons a (cons '? '()))))
               ((1 Q 1) (car/cons a (cons '? '())))
               ;; ((1 E 1) (second-of (cons a (cons '? '()))))
               ;; ((1 E 1 1) (cdr/cons a (cons '? '())))
               ;; ((1 E 1) (car/cons '? '()))
               ;; ((1 E) (equal-same '?))
               ;; ((1) (if-same (equal a '?) 't))
               ;; (() (equal-same 't))
               )))

(jbob.prove (dethm.in-first-of-pair)
            '(((dethm in-second-of-pair (a)
                      (equal (in-pair? (pair a '?)) 't))
               nil
               ((1 1) (pair a '?))
               ((1) (in-pair? (cons a (cons '? '()))))
               ((1 Q 1) (first-of (cons a (cons '? '()))))
               ((1 Q 1) (car/cons a (cons '? '())))
               ((1 E 1) (second-of (cons a (cons '? '()))))
               ;; ((1 E 1 1) (cdr/cons a (cons '? '())))
               ;; ((1 E 1) (car/cons '? '()))
               ;; ((1 E) (equal-same '?))
               ;; ((1) (if-same (equal a '?) 't))
               ;; (() (equal-same 't))
               )))

(jbob.prove (dethm.in-first-of-pair)
            '(((dethm in-second-of-pair (a)
                      (equal (in-pair? (pair a '?)) 't))
               nil
               ((1 1) (pair a '?))
               ((1) (in-pair? (cons a (cons '? '()))))
               ((1 Q 1) (first-of (cons a (cons '? '()))))
               ((1 Q 1) (car/cons a (cons '? '())))
               ((1 E 1) (second-of (cons a (cons '? '()))))
               ((1 E 1 1) (cdr/cons a (cons '? '())))
               ;; ((1 E 1) (car/cons '? '()))
               ;; ((1 E) (equal-same '?))
               ;; ((1) (if-same (equal a '?) 't))
               ;; (() (equal-same 't))
               )))

(jbob.prove (dethm.in-first-of-pair)
            '(((dethm in-second-of-pair (a)
                      (equal (in-pair? (pair a '?)) 't))
               nil
               ((1 1) (pair a '?))
               ((1) (in-pair? (cons a (cons '? '()))))
               ((1 Q 1) (first-of (cons a (cons '? '()))))
               ((1 Q 1) (car/cons a (cons '? '())))
               ((1 E 1) (second-of (cons a (cons '? '()))))
               ((1 E 1 1) (cdr/cons a (cons '? '())))
               ((1 E 1) (car/cons '? '()))
               ;; ((1 E) (equal-same '?))
               ;; ((1) (if-same (equal a '?) 't))
               ;; (() (equal-same 't))
               )))

(jbob.prove (dethm.in-first-of-pair)
            '(((dethm in-second-of-pair (a)
                      (equal (in-pair? (pair a '?)) 't))
               nil
               ((1 1) (pair a '?))
               ((1) (in-pair? (cons a (cons '? '()))))
               ((1 Q 1) (first-of (cons a (cons '? '()))))
               ((1 Q 1) (car/cons a (cons '? '())))
               ((1 E 1) (second-of (cons a (cons '? '()))))
               ((1 E 1 1) (cdr/cons a (cons '? '())))
               ((1 E 1) (car/cons '? '()))
               ((1 E) (equal-same '?))
               ;; ((1) (if-same (equal a '?) 't))
               ;; (() (equal-same 't))
               )))

(jbob.prove (dethm.in-first-of-pair)
            '(((dethm in-second-of-pair (a)
                      (equal (in-pair? (pair a '?)) 't))
               nil
               ((1 1) (pair a '?))
               ((1) (in-pair? (cons a (cons '? '()))))
               ((1 Q 1) (first-of (cons a (cons '? '()))))
               ((1 Q 1) (car/cons a (cons '? '())))
               ((1 E 1) (second-of (cons a (cons '? '()))))
               ((1 E 1 1) (cdr/cons a (cons '? '())))
               ((1 E 1) (car/cons '? '()))
               ((1 E) (equal-same '?))
               ((1) (if-same (equal a '?) 't))
               ;; (() (equal-same 't))
               )))

(jbob.prove (dethm.in-first-of-pair)
            '(((dethm in-second-of-pair (a)
                      (equal (in-pair? (pair a '?)) 't))
               nil
               ((1 1) (pair a '?))
               ((1) (in-pair? (cons a (cons '? '()))))
               ((1 Q 1) (first-of (cons a (cons '? '()))))
               ((1 Q 1) (car/cons a (cons '? '())))
               ((1 E 1) (second-of (cons a (cons '? '()))))
               ((1 E 1 1) (cdr/cons a (cons '? '())))
               ((1 E 1) (car/cons '? '()))
               ((1 E) (equal-same '?))
               ((1) (if-same (equal a '?) 't))
               (() (equal-same 't))
               )))

